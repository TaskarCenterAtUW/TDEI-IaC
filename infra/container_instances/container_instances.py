import json
import os
from azure.mgmt.containerinstance import ContainerInstanceManagementClient

class ContainerInstaces:
    def __init__(self, credential, subscription_id, resource_group):
        self.client = ContainerInstanceManagementClient(
            credential, subscription_id)
        self.resource_group = resource_group

    
    def provision(self, config_name, environment, location):

        # Load postgresql config file.
        current_dir = os.path.dirname(__file__)
        config_file = os.path.join(
            current_dir, "config", config_name, "config.json")
        
        containers_config_file = open(config_file)
        containers_config = json.load(containers_config_file)
        print(f"Loaded postgresql config file {config_file}")

        response = client.container_groups.begin_create_or_update(
        resource_group_name=self.resource_group,
        container_group_name="demo1",
        container_group={
            "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name": {}
                },
            },
            "location": "west us",
            "properties": {
                "containers": [
                    {
                        "name": "demo1",
                        "properties": {
                            "command": [],
                            "environmentVariables": [],
                            "image": "nginx",
                            "ports": [{"port": 80}],
                            "resources": {"requests": {"cpu": 1, "gpu": {"count": 1, "sku": "K80"}, "memoryInGB": 1.5}},
                            "volumeMounts": [
                                {"mountPath": "/mnt/volume1", "name": "volume1", "readOnly": False},
                                {"mountPath": "/mnt/volume2", "name": "volume2", "readOnly": False},
                                {"mountPath": "/mnt/volume3", "name": "volume3", "readOnly": True},
                            ],
                        },
                    }
                ],
                "diagnostics": {
                    "logAnalytics": {
                        "logType": "ContainerInsights",
                        "metadata": {"test-key": "test-metadata-value"},
                        "workspaceId": "workspaceid",
                        "workspaceKey": "workspaceKey",
                        "workspaceResourceId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace",
                    }
                },
                "dnsConfig": {
                    "nameServers": ["1.1.1.1"],
                    "options": "ndots:2",
                    "searchDomains": "cluster.local svc.cluster.local",
                },
                "imageRegistryCredentials": [],
                "ipAddress": {
                    "autoGeneratedDomainNameLabelScope": "Unsecure",
                    "dnsNameLabel": "dnsnamelabel1",
                    "ports": [{"port": 80, "protocol": "TCP"}],
                    "type": "Public",
                },
                "osType": "Linux",
                "subnetIds": [
                    {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                    }
                ],
                "volumes": [
                    {
                        "azureFile": {
                            "shareName": "shareName",
                            "storageAccountKey": "accountKey",
                            "storageAccountName": "accountName",
                        },
                        "name": "volume1",
                    },
                    {"emptyDir": {}, "name": "volume2"},
                    {
                        "name": "volume3",
                        "secret": {"secretKey1": "SecretValue1InBase64", "secretKey2": "SecretValue2InBase64"},
                    },
                ],
            },
        },
    ).result()
    print(response)